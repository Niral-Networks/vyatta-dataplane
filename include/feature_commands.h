/*
 * Copyright (c) 2019-2020, AT&T Intellectual Property.  All rights reserved.
 *
 * SPDX-License-Identifier: LGPL-2.1-only
 */
#ifndef VYATTA_DATAPLANE_FEATURE_COMMANDS_H
#define VYATTA_DATAPLANE_FEATURE_COMMANDS_H

#include <stdio.h>

/*
 * A feature plugin can register command handlers for config commands
 * and op mode commands.
 */

/*
 * A config command is a set of bytes of a given length. This will have been
 * generated by the feature code in the config system. It is expected to be
 * in protobuf version2 format.
 */
struct pb_msg {
	/*
	 * Pointer to the data. This will have been constructed by the
	 * feature code in the config system, and will be passed down
	 * unmodified.
	 */
	void *msg;
	/*
	 * The length of the config message
	 */
	size_t msg_len;
	/*
	 * File that errors or other useful information can be written to.
	 */
	FILE *fp;
	/*
	 * If this message has a response then it will be stored here. Config
	 * messages do not have responses, op mode messages may have responses.
	 * This will be passed back unmodified.
	 */
	void *ret_msg;
	/*
	 * The length of the response.
	 */
	size_t ret_msg_len;
};

/*
 * A callback function for processing a config command message.
 *
 * @param[in] msg The structure containing the configuration.
 *
 * @return 0 if the command was successfully processed.
 *         -ve value for any error.
 */
typedef int
(pb_cmd_proc)(struct pb_msg *msg);

/*
 * Register a command handler for a given command.
 *
 * @param[in] name The name of the config command. Commands sent from the
 *            config system need to use this name too.
 * @param[in] handler The handler function to process commands.
 *
 * @return 0 if the handler was successfully registered
 *         -EEXIST If the name is already in use.
 *         -ENOMEM If there is not enough memory to add this handler
 */
int
dp_feature_register_pb_cfg_handler(const char *name,
				   pb_cmd_proc handler);

/*
 * Use pb_cmd_err instead of fprintf(msg->fp, "").  msg->fp may be NULL
 * if a command is deferred and then replayed, for example after an
 * interface event.
 */
void dp_pb_cmd_err(struct pb_msg *msg, const char *fmt, ...);

/*
 * Register a command handler for a given op mode command.
 *
 * @param[in] name The name of the op mode command. Op mode commands from the
 *            system need to use this name too.
 * @param[in] handler The handler function to process op mode commands.
 *
 * @return 0 if the handler was successfully registered
 *         -EEXIST If the name is already in use.
 *         -ENOMEM If there is not enough memory to add this handler
 */
int
dp_feature_register_pb_op_handler(const char *name,
				  pb_cmd_proc handler);


/*
 * Callback function used when registering a string based op mode handler.
 *
 * @param[in, out] f File to write output to.
 * @param[in] argc Count of the number of args in argv
 * @param[in] argv Array of string arguments.
 *
 * @return 0 on success
 *         -ve on error.
 *
 * @deprecated. The is deprecated in favour of the existing protobuf
 * handlers.
 */
typedef int (feature_string_op_fn)(FILE *f, int argc, char **argv);

/*
 * Register a new op mode command.
 *
 * @param[in] name The name of the command to register. Must not already be used
 * @param[in] help A help string for the new command.
 * @param[in] fn A function to call to process this commands
 *
 * @return 0 on success
 *         -ve on error.
 *
 * @deprecated. The is deprecated in favour of the existing protobuf
 * handlers.
 */
int dp_feature_register_string_op_handler(const char *name,
					  const char *help,
					  feature_string_op_fn *fn);

/*
 * Callback function used when registering a string based cfg handler.
 *
 * @param[in, out] f File to write output to.
 * @param[in] argc Count of the number of args in argv
 * @param[in] argv Array of string arguments.
 *
 * @return 0 on success
 *         -ve on error.
 *
 * @deprecated. The is deprecated in favour of the existing protobuf
 * handlers.
 */
typedef int (string_cfg_fn)(FILE *f, int argc, char **argv);

/*
 * Register a new op mode command. This must be done as part of the plugin init.
 * If it is done later then the topic will not be registered correctly and
 * messages will not be processed.
 *
 * @param[in] name The name of the cfg handler to register. Must not already
 *            be used
 * @param[in] fn A function to call to process this config
 *
 * @return 0 on success
 *         -ve on error.
 *
 * @deprecated. The is deprecated in favour of the existing protobuf
 * handlers.
 */
int dp_feature_register_string_cfg_handler(const char *name,
					   string_cfg_fn *fn);

#endif /* VYATTA_DATAPLANE_FEATURE_COMMANDS_H */
